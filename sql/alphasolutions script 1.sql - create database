DROP database IF EXISTS AlphaSolution_db;
CREATE DATABASE IF NOT EXISTS AlphaSolution_db;
USE AlphaSolution_db;

CREATE table skill(
skill_id INTEGER NOT NULL AUTO_INCREMENT,
skill_name VARCHAR(200) NOT NULL,
PRIMARY KEY(skill_id)
);

CREATE table role(
role_id INTEGER NOT NULL AUTO_INCREMENT,
role_name VARCHAR(50) NOT NULL,
PRIMARY KEY(role_id)
);

CREATE table emp(
emp_id INTEGER NOT NULL AUTO_INCREMENT,
emp_name VARCHAR(200) NOT NULL,
emp_email VARCHAR(200) NOT NULL UNIQUE,
emp_password VARCHAR(200) NOT NULL,
role_id INTEGER NOT NULL,
PRIMARY KEY(emp_id),
FOREIGN KEY(role_id) REFERENCES role(role_id)
);

CREATE table emp_skills(
skill_id INTEGER NOT NULL,
emp_id INTEGER NOT NULL,
PRIMARY KEY(skill_id,emp_id),
FOREIGN KEY(skill_id) REFERENCES skill(skill_id),
FOREIGN KEY(emp_id) REFERENCES emp(emp_id)
);

CREATE table project(
project_id INTEGER NOT NULL AUTO_INCREMENT,
project_manager_id INT NOT NULL,
project_name VARCHAR(300) NOT NULL,
project_description VARCHAR(5000),
project_time_estimate INT,
project_dedicated_hours INT,
project_deadline DATE,
project_status VARCHAR(200),
PRIMARY KEY(project_id),
FOREIGN KEY(project_manager_id) REFERENCES emp(emp_id)
);

CREATE table subproject(
subproject_id INTEGER NOT NULL AUTO_INCREMENT,
project_id INTEGER NOT NULL,
subproject_name VARCHAR(200) NOT NULL,
subproject_description VARCHAR(1000),
subproject_time_estimate INT,
subproject_dedicated_hours INT,
subproject_deadline DATE,
subproject_status VARCHAR(200),
PRIMARY KEY(subproject_id),
FOREIGN KEY(project_id) REFERENCES project(project_id) ON DELETE CASCADE
);

CREATE table task(
task_id INTEGER NOT NULL AUTO_INCREMENT,
subproject_id INTEGER NOT NULL,
task_name VARCHAR(200) NOT NULL,
task_description VARCHAR(1000),
task_time_estimate INT,
task_deadline DATE,
task_status VARCHAR(200),
PRIMARY KEY(task_id),
FOREIGN KEY(subproject_id) REFERENCES subproject(subproject_id) ON DELETE CASCADE
);

CREATE table task_emp(
task_id INT NOT NULL,
emp_id INT NOT NULL,
PRIMARY KEY(task_id,emp_id),
FOREIGN KEY(task_id) REFERENCES task(task_id) ON DELETE CASCADE,
FOREIGN KEY(emp_id) REFERENCES emp(emp_id)
);

DELIMITER //

CREATE TRIGGER trg_update_subproject_hours
AFTER INSERT ON task
FOR EACH ROW
BEGIN
    UPDATE subproject
    SET subproject_dedicated_hours = (
        SELECT SUM(task_time_estimate)
        FROM task
        WHERE subproject_id = NEW.subproject_id
    )
    WHERE subproject_id = NEW.subproject_id;
END;
//

CREATE TRIGGER trg_update_subproject_hours_on_update
AFTER UPDATE ON task
FOR EACH ROW
BEGIN
    UPDATE subproject
    SET subproject_dedicated_hours = (
        SELECT SUM(task_time_estimate)
        FROM task
        WHERE subproject_id = NEW.subproject_id
    )
    WHERE subproject_id = NEW.subproject_id;
END;
//

CREATE TRIGGER trg_update_project_hours
AFTER UPDATE ON subproject
FOR EACH ROW
BEGIN
    UPDATE project
    SET project_dedicated_hours = (
        SELECT SUM(subproject_dedicated_hours)
        FROM subproject
        WHERE project_id = NEW.project_id
    )
    WHERE project_id = NEW.project_id;
END;
//

CREATE TRIGGER trg_update_subproject_hours_on_delete
AFTER DELETE ON task
FOR EACH ROW
BEGIN
    UPDATE subproject
    SET subproject_dedicated_hours = (
        SELECT SUM(task_time_estimate)
        FROM task
        WHERE subproject_id = OLD.subproject_id
    )
    WHERE subproject_id = OLD.subproject_id;

    UPDATE project
    SET project_dedicated_hours = (
        SELECT SUM(subproject_dedicated_hours)
        FROM subproject
        WHERE project_id = (
            SELECT project_id
            FROM subproject
            WHERE subproject_id = OLD.subproject_id
        )
    )
    WHERE project_id = (
        SELECT project_id
        FROM subproject
        WHERE subproject_id = OLD.subproject_id
    );
END;
//

DELIMITER ;